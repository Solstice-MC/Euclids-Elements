plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

base.archivesName = mod_id
group = mod_group
version = mod_version

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

repositories {
    maven { url 'https://maven.neoforged.net/releases' }
	mavenCentral()
}


dependencies {
    minecraft "net.minecraft:minecraft:$minecraft_version"
    mappings loom.layered {
        it.mappings("net.fabricmc:yarn:$yarn_mappings:v2")
        it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$yarn_mappings_patch_version")
    }
    neoForge "net.neoforged:neoforge:$neoforge_version"

	testmodImplementation sourceSets.main.output
}

loom {
    interfaceInjection {
        enableDependencyInterfaceInjection = true
    }
	runs {
		datagen {
			data()
			source sourceSets.testmod
			programArgs("--mod", "$mod_id", "--all", "--output", file("src/generated/resources").absolutePath)
			ideConfigGenerated(true)
			runDir("run")
			name = "Minecraft Datagen"
		}
		client {
			source sourceSets.testmod
			name = "Minecraft Client"
		}
		server {
			source sourceSets.testmod
			name = "Minecraft Server"
		}
	}
}

processResources {
    filesMatching('META-INF/neoforge.mods.toml') {
        expand project.properties
    }
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
tasks.build.finalizedBy publishToMavenLocal

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	filesMatching('META-INF/neoforge.mods.toml') {
		expand project.properties
	}
}
