plugins {
	id 'net.neoforged.moddev' version '2.0.+'
	id 'maven-publish'
}

base.archivesName = mod_id
group = mod_group
version = mod_version

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

repositories {
	maven { url 'https://maven.neoforged.net/releases' }
	maven { url "https://maven.architectury.dev/" }
	mavenCentral()
}

neoForge {
	version = neoforge_version

	interfaceInjectionData {
		from file("src/main/resources/interface_injections.json")
	}

	parchment {
		mappingsVersion = parchment_mappings_version
		minecraftVersion = minecraft_version
	}

	runs {
		client {
			client()
		}
		server {
			server()
		}
		data {
			data()
			programArguments.addAll(
				'--mod', 'tabula',
				'--all',
				'--output', file('src/generated/resources/').getAbsolutePath(),
				'--existing', file('src/main/resources/').getAbsolutePath()
			)
		}
		configureEach {
			sourceSet = sourceSets.testmod
		}
	}

	mods {
		"euclids-elements" {
			sourceSet sourceSets.main
		}
		"tabula" {
			sourceSet sourceSets.testmod
		}
	}
}

dependencies {
	testmodImplementation sourceSets.main.output
}

processResources {
	filesMatching('META-INF/neoforge.mods.toml') {
		expand project.properties
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
tasks.build.finalizedBy publishToMavenLocal

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	filesMatching('META-INF/neoforge.mods.toml') {
		expand project.properties
	}
}
